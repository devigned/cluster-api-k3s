apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: default
  labels:
    ccm: azure
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KThreesControlPlane
    name: ${CLUSTER_NAME}-control-plane
    namespace: default
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureCluster
    name: ${CLUSTER_NAME}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureCluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: default
spec:
  location: southcentralus
  networkSpec:
    vnet:
      name: ${CLUSTER_NAME}-vnet
  resourceGroup: ${CLUSTER_NAME}
  subscriptionID: ${AZURE_SUBSCRIPTION_ID}
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KThreesControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  infrastructureTemplate:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureMachineTemplate
    name: ${CLUSTER_NAME}-control-plane
  kthreesConfigSpec:
    files:
    - contentFrom:
        secret:
          key: control-plane-azure.json
          name: ${CLUSTER_NAME}-control-plane-azure-json
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
  replicas: 1
  version: v1.20.0+k3s2
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  template:
    spec:
      osDisk:
        diskSizeGB: 128
        managedDisk:
          storageAccountType: Premium_LRS
        osType: Linux
      sshPublicKey: ""
      vmSize: Standard_D2s_v3
      image:
        marketplace:
          publisher: Canonical
          sku: 18.04-LTS
          offer: UbuntuServer
          version: latest
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  template:
    spec:
      osDisk:
        diskSizeGB: 128
        managedDisk:
          storageAccountType: Premium_LRS
        osType: Linux
      sshPublicKey: ""
      vmSize: Standard_D2s_v3
      image:
        marketplace:
          publisher: Canonical
          sku: 18.04-LTS
          offer: UbuntuServer
          version: latest
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KThreesConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  template:
    spec:
      preK3sCommands:
        - curl -sLJO https://github.com/Mossaka/containerd-wasm-shims/releases/download/v0.1.5-alpha.2/wasmtest.tar.gz
        - sudo tar -xf wasmtest.tar.gz -C /usr/local/bin/
      postK3sCommands:
        - cp /etc/rancher/config.toml.tmpl /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl
        - sudo service k3s restart
        - sudo service containerd restart
      files:
      - owner: root:root
        path: /etc/rancher/config.toml.tmpl
        permissions: "0644"
        content: |
          [plugins.opt]
            path = "{{ .NodeConfig.Containerd.Opt }}"
          [plugins.cri]
            stream_server_address = "127.0.0.1"
            stream_server_port = "10010"
            enable_selinux = {{ .NodeConfig.SELinux }}
          {{- if .DisableCgroup}}
            disable_cgroup = true
          {{end}}
          {{- if .IsRunningInUserNS }}
            disable_apparmor = true
            restrict_oom_score_adj = true
          {{end}}
          {{- if .NodeConfig.AgentConfig.PauseImage }}
            sandbox_image = "{{ .NodeConfig.AgentConfig.PauseImage }}"
          {{end}}
          {{- if .NodeConfig.AgentConfig.Snapshotter }}
          [plugins.cri.containerd]
            snapshotter = "{{ .NodeConfig.AgentConfig.Snapshotter }}"
            disable_snapshot_annotations = {{ if eq .NodeConfig.AgentConfig.Snapshotter "stargz" }}false{{else}}true{{end}}
          {{ if eq .NodeConfig.AgentConfig.Snapshotter "stargz" }}
          {{ if .NodeConfig.AgentConfig.ImageServiceSocket }}
          [plugins.stargz]
          cri_keychain_image_service_path = "{{ .NodeConfig.AgentConfig.ImageServiceSocket }}"
          [plugins.stargz.cri_keychain]
          enable_keychain = true
          {{end}}
          {{ if .PrivateRegistryConfig }}
          {{ if .PrivateRegistryConfig.Mirrors }}
          [plugins.stargz.registry.mirrors]{{end}}
          {{range $k, $v := .PrivateRegistryConfig.Mirrors }}
          [plugins.stargz.registry.mirrors."{{$k}}"]
            endpoint = [{{range $i, $j := $v.Endpoints}}{{if $i}}, {{end}}{{printf "%q" .}}{{end}}]
          {{if $v.Rewrites}}
            [plugins.stargz.registry.mirrors."{{$k}}".rewrite]
          {{range $pattern, $replace := $v.Rewrites}}
              "{{$pattern}}" = "{{$replace}}"
          {{end}}
          {{end}}
          {{end}}
          {{range $k, $v := .PrivateRegistryConfig.Configs }}
          {{ if $v.Auth }}
          [plugins.stargz.registry.configs."{{$k}}".auth]
            {{ if $v.Auth.Username }}username = {{ printf "%q" $v.Auth.Username }}{{end}}
            {{ if $v.Auth.Password }}password = {{ printf "%q" $v.Auth.Password }}{{end}}
            {{ if $v.Auth.Auth }}auth = {{ printf "%q" $v.Auth.Auth }}{{end}}
            {{ if $v.Auth.IdentityToken }}identitytoken = {{ printf "%q" $v.Auth.IdentityToken }}{{end}}
          {{end}}
          {{ if $v.TLS }}
          [plugins.stargz.registry.configs."{{$k}}".tls]
            {{ if $v.TLS.CAFile }}ca_file = "{{ $v.TLS.CAFile }}"{{end}}
            {{ if $v.TLS.CertFile }}cert_file = "{{ $v.TLS.CertFile }}"{{end}}
            {{ if $v.TLS.KeyFile }}key_file = "{{ $v.TLS.KeyFile }}"{{end}}
            {{ if $v.TLS.InsecureSkipVerify }}insecure_skip_verify = true{{end}}
          {{end}}
          {{end}}
          {{end}}
          {{end}}
          {{end}}
          {{- if not .NodeConfig.NoFlannel }}
          [plugins.cri.cni]
            bin_dir = "{{ .NodeConfig.AgentConfig.CNIBinDir }}"
            conf_dir = "{{ .NodeConfig.AgentConfig.CNIConfDir }}"
          {{end}}
          [plugins.cri.containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"
          {{ if .PrivateRegistryConfig }}
          {{ if .PrivateRegistryConfig.Mirrors }}
          [plugins.cri.registry.mirrors]{{end}}
          {{range $k, $v := .PrivateRegistryConfig.Mirrors }}
          [plugins.cri.registry.mirrors."{{$k}}"]
            endpoint = [{{range $i, $j := $v.Endpoints}}{{if $i}}, {{end}}{{printf "%q" .}}{{end}}]
          {{if $v.Rewrites}}
            [plugins.cri.registry.mirrors."{{$k}}".rewrite]
          {{range $pattern, $replace := $v.Rewrites}}
              "{{$pattern}}" = "{{$replace}}"
          {{end}}
          {{end}}
          {{end}}
          {{range $k, $v := .PrivateRegistryConfig.Configs }}
          {{ if $v.Auth }}
          [plugins.cri.registry.configs."{{$k}}".auth]
            {{ if $v.Auth.Username }}username = {{ printf "%q" $v.Auth.Username }}{{end}}
            {{ if $v.Auth.Password }}password = {{ printf "%q" $v.Auth.Password }}{{end}}
            {{ if $v.Auth.Auth }}auth = {{ printf "%q" $v.Auth.Auth }}{{end}}
            {{ if $v.Auth.IdentityToken }}identitytoken = {{ printf "%q" $v.Auth.IdentityToken }}{{end}}
          {{end}}
          {{ if $v.TLS }}
          [plugins.cri.registry.configs."{{$k}}".tls]
            {{ if $v.TLS.CAFile }}ca_file = "{{ $v.TLS.CAFile }}"{{end}}
            {{ if $v.TLS.CertFile }}cert_file = "{{ $v.TLS.CertFile }}"{{end}}
            {{ if $v.TLS.KeyFile }}key_file = "{{ $v.TLS.KeyFile }}"{{end}}
            {{ if $v.TLS.InsecureSkipVerify }}insecure_skip_verify = true{{end}}
          {{end}}
          {{end}}
          {{end}}
          {{range $k, $v := .ExtraRuntimes}}
          [plugins.cri.containerd.runtimes."{{$k}}"]
            runtime_type = "{{$v.RuntimeType}}"
          [plugins.cri.containerd.runtimes."{{$k}}".options]
            BinaryName = "{{$v.BinaryName}}"
          {{end}}

          [plugins.cri.containerd.runtimes.wasm]
            runtime_type = "io.containerd.spin.v1"
          [plugins.cri.containerd.runtimes.aspdotnet]
            runtime_type = "io.containerd.aspdotnet.v1"
      - contentFrom:
          secret:
            key: worker-node-azure.json
            name: ${CLUSTER_NAME}-md-0-azure-json
        owner: root:root
        path: /etc/kubernetes/azure.json
        permissions: "0644"
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: 2
  selector:
    matchLabels: null
  template:
    spec:
      version: v1.20.0+k3s2
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KThreesConfigTemplate
          name: ${CLUSTER_NAME}-md-0
      clusterName: ${CLUSTER_NAME}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        name: ${CLUSTER_NAME}-md-0
